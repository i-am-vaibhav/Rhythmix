// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using rhythmix_user_services.Data;

#nullable disable

namespace rhythmix_user_services.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250517143948_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("rhythmix_user_services.Models.UserDetails", b =>
                {
                    b.Property<Guid>("userId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("userName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("userId");

                    b.HasIndex("userName")
                        .IsUnique();

                    b.ToTable("UserDetails", (string)null);
                });

            modelBuilder.Entity("rhythmix_user_services.Models.UserLibrary", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<Guid?>("UserDetailsuserId")
                        .HasColumnType("uuid");

                    b.Property<bool>("isLiked")
                        .HasColumnType("boolean");

                    b.Property<Guid>("mediaId")
                        .HasColumnType("uuid");

                    b.Property<string>("playlistName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("userId")
                        .HasColumnType("uuid");

                    b.HasKey("id");

                    b.HasIndex("UserDetailsuserId");

                    b.ToTable("UserLibrary", (string)null);
                });

            modelBuilder.Entity("rhythmix_user_services.Models.UserMetadata", b =>
                {
                    b.Property<Guid>("metadataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("preferredArtist")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("preferredGenre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("preferredLanguage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("userId")
                        .HasColumnType("uuid");

                    b.HasKey("metadataId");

                    b.HasIndex("userId")
                        .IsUnique();

                    b.ToTable("UserMetadata", (string)null);
                });

            modelBuilder.Entity("rhythmix_user_services.Models.UserLibrary", b =>
                {
                    b.HasOne("rhythmix_user_services.Models.UserDetails", null)
                        .WithMany("library")
                        .HasForeignKey("UserDetailsuserId");
                });

            modelBuilder.Entity("rhythmix_user_services.Models.UserMetadata", b =>
                {
                    b.HasOne("rhythmix_user_services.Models.UserDetails", "user")
                        .WithOne("metadata")
                        .HasForeignKey("rhythmix_user_services.Models.UserMetadata", "userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("rhythmix_user_services.Models.UserDetails", b =>
                {
                    b.Navigation("library");

                    b.Navigation("metadata")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
